function loginHandler(login , password){	if(typeof __myNameSpace == 'undefined'){		return false;	}		var	ERRORS			= __myNameSpace.ERRORS,	ROLES			= __myNameSpace.ROLES,	directoryROLES	= __myNameSpace.DirectoryROLES,	sessionRef 		= currentSession(),	promoteToken 	= sessionRef.promoteWith(ROLES.ADMINISTRATOR),	myUser 			= ds.User({ loginLowerCase : login.toLowerCase() }),	theGroups 		= [],	check			= true;		sessionRef.unPromote(promoteToken);		if (myUser === null) {		return false;	}	else {		if (myUser.validatePassword(password)) {			switch (myUser.role) {				case ROLES.ADMINISTRATOR:				theGroups = [directoryROLES.ADMINISTRATOR];				break;								case ROLES.TEACHER:				theGroups = [directoryROLES.TEACHER];				break;								case ROLES.STUDENT:				theGroups = [directoryROLES.STUDENT];				break;								case ROLES.PARENT:				theGroups = [directoryROLES.PARENT];				break;								case ROLES.RECORDOFFICER:				theGroups = [directoryROLES.RECORDOFFICER];				break;								default:				logout();				return ERRORS.login.unknownRole;				break;			}						var connectTime = new Date();			return {				name		: login,				fullName	: myUser.fullname,				belongsTo	: theGroups,				storage		: {					time		: connectTime,					firstname 	: myUser.firstname.toUpperCase(),					lastname 	: myUser.lastname,					email		: myUser.email,					ID			: myUser.ID,					role 		: myUser.role				}			}					} else {			return ERRORS.login.passwordInvalid;		}	}		return ERRORS.login.notExist;}